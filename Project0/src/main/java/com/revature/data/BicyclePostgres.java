package com.revature.data;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import com.revature.beans.Bicycle;
import com.revature.utils.ConnectionUtility;

public class BicyclePostgres implements BicycleDAO {
	private ConnectionUtility connUtil = ConnectionUtility.getConnectionUtil();
	private BicycleDAO bicycleDao = new BicyclePostgres();
	@Override
	public int create(Bicycle dataToAdd) {
		int generatedId = 0;

		// try-with-resources auto-closes resources
		try (Connection conn = connUtil.getConnection()) {
			// when you run DML statements, you want to manage the TCL
			conn.setAutoCommit(false);

			String sql = "insert into bicycle (id,brand,color,terrainType) "
					+ "values (default, ?, ?, ?, ?)";
			String[] keys = { "id" }; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setString(1, dataToAdd.getBrand()); // question mark index starts at 1
			pStmt.setString(2, dataToAdd.getColor());
			pStmt.setString(3, dataToAdd.getTerrainType());

			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();

			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return generatedId;
	}

	@Override
	public Bicycle getById(int id) {
		Bicycle bicycle = null;
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from bicycle where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				bicycle = new Bicycle();
				bicycle.setId(id);
				bicycle.setBrand(resultSet.getString("brand"));
				bicycle.setColor(resultSet.getString("color"));
				bicycle.setTerrainType(resultSet.getString("terraintype"));
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return bicycle;
	}
	@Override
	public Set<Bicycle> getAll() {
		Set<Bicycle> allBicycles = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from pet";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			// while the result set has another row
			while (resultSet.next()) {
				// create a new bicycle object
				Bicycle bicycle = new Bicycle();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				bicycle.setId(resultSet.getInt("id"));
				bicycle.setBrand(resultSet.getString("brand"));
				bicycle.setColor(resultSet.getString("color"));
				bicycle.setTerrainType(resultSet.getString("terraintype"));
				
				allBicycles.add(bicycle);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allBicycles;
	}

	@Override
	public void update(Bicycle dataToUpdate) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update bicycle set "
					+ "brand=?, color=?, terraintype=?"
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setString(1, dataToUpdate.getBrand());
			pStmt.setString(2, dataToUpdate.getColor());
			pStmt.setString(3, dataToUpdate.getTerrainType());
			pStmt.setInt(6, dataToUpdate.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	@Override
	public void delete(Bicycle dataToDelete) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);

			String sql = "delete from bicycle "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());

			int rowsAffected = pStmt.executeUpdate();

			if (rowsAffected==1) {
				sql="delete from bicycle where bicycleID=?";
				PreparedStatement pStmt2 = conn.prepareStatement(sql);
				pStmt2.setInt(1, dataToDelete.getId());
				rowsAffected = pStmt2.executeUpdate();
				
				if (rowsAffected<=1) {
					conn.commit();
				} else {
					conn.rollback();
				}
			} else {
				conn.rollback();
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	@Override
	public Set<Bicycle> getByBrand(String brand) {
		Set<Bicycle> availableBicycleBrands = bicycleDao.getByBrand("Available");
		
		availableBicycleBrands = availableBicycleBrands.stream()
				.filter(bicycle -> bicycle.getBrand().toLowerCase().contains(brand.toLowerCase()))
				.collect(Collectors.toSet());
		return availableBicycleBrands;
	}

	@Override
	public Set<Bicycle> getByColor(String color) {
		Set<Bicycle> availableBicycleColors = bicycleDao.getByColor("Available");
		
		availableBicycleColors = availableBicycleColors.stream()
				.filter(bicycle -> bicycle.getColor().toLowerCase().contains(color.toLowerCase()))
				.collect(Collectors.toSet());
		return availableBicycleColors;
	}

	@Override
	public Set<Bicycle> getByTerrainType(String terrainType) {
		Set<Bicycle> availableBicycleTerrainTypes = bicycleDao.getByTerrainType("Available");
		
		availableBicycleTerrainTypes = availableBicycleTerrainTypes.stream()
				.filter(bicycle -> bicycle.getTerrainType().toLowerCase().contains(terrainType.toLowerCase()))
				.collect(Collectors.toSet());
		return availableBicycleTerrainTypes;
	}
	
	

}
